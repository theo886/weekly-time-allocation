{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { Constants, UrlString } from '@azure/msal-common';\nimport { FetchClient } from '../network/FetchClient.js';\nimport { XhrClient } from '../network/XhrClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Utility class for browser specific functions\r\n */\nvar BrowserUtils = /** @class */function () {\n  function BrowserUtils() {}\n  // #region Window Navigation and URL management\n  /**\r\n   * Clears hash from window url.\r\n   */\n  BrowserUtils.clearHash = function (contentWindow) {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = Constants.EMPTY_STRING;\n    if (typeof contentWindow.history.replaceState === \"function\") {\n      // Full removes \"#\" from url\n      contentWindow.history.replaceState(null, Constants.EMPTY_STRING, \"\" + contentWindow.location.origin + contentWindow.location.pathname + contentWindow.location.search);\n    }\n  };\n  /**\r\n   * Replaces current hash with hash from provided url\r\n   */\n  BrowserUtils.replaceHash = function (url) {\n    var urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Returns boolean of whether the current window is in an iframe or not.\r\n   */\n  BrowserUtils.isInIframe = function () {\n    return window.parent !== window;\n  };\n  /**\r\n   * Returns boolean of whether or not the current window is a popup opened by msal\r\n   */\n  BrowserUtils.isInPopup = function () {\n    return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(BrowserConstants.POPUP_NAME_PREFIX + \".\") === 0;\n  };\n  // #endregion\n  /**\r\n   * Returns current window URL as redirect uri\r\n   */\n  BrowserUtils.getCurrentUri = function () {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n  };\n  /**\r\n   * Gets the homepage url for the current window location.\r\n   */\n  BrowserUtils.getHomepage = function () {\n    var currentUrl = new UrlString(window.location.href);\n    var urlComponents = currentUrl.getUrlComponents();\n    return urlComponents.Protocol + \"//\" + urlComponents.HostNameAndPort + \"/\";\n  };\n  /**\r\n   * Returns best compatible network client object.\r\n   */\n  BrowserUtils.getBrowserNetworkClient = function () {\n    if (window.fetch && window.Headers) {\n      return new FetchClient();\n    } else {\n      return new XhrClient();\n    }\n  };\n  /**\r\n   * Throws error if we have completed an auth and are\r\n   * attempting another auth request inside an iframe.\r\n   */\n  BrowserUtils.blockReloadInHiddenIframes = function () {\n    var isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && BrowserUtils.isInIframe()) {\n      throw BrowserAuthError.createBlockReloadInHiddenIframeError();\n    }\n  };\n  /**\r\n   * Block redirect operations in iframes unless explicitly allowed\r\n   * @param interactionType Interaction type for the request\r\n   * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n   */\n  BrowserUtils.blockRedirectInIframe = function (interactionType, allowRedirectInIframe) {\n    var isIframedApp = BrowserUtils.isInIframe();\n    if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n      // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n      throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\n    }\n  };\n  /**\r\n   * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n   */\n  BrowserUtils.blockAcquireTokenInPopups = function () {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (BrowserUtils.isInPopup()) {\n      throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\n    }\n  };\n  /**\r\n   * Throws error if token requests are made in non-browser environment\r\n   * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n   */\n  BrowserUtils.blockNonBrowserEnvironment = function (isBrowserEnvironment) {\n    if (!isBrowserEnvironment) {\n      throw BrowserAuthError.createNonBrowserEnvironmentError();\n    }\n  };\n  /**\r\n   * Throws error if native brokering is enabled but initialize hasn't been called\r\n   * @param allowNativeBroker\r\n   * @param initialized\r\n   */\n  BrowserUtils.blockNativeBrokerCalledBeforeInitialized = function (allowNativeBroker, initialized) {\n    if (allowNativeBroker && !initialized) {\n      throw BrowserAuthError.createNativeBrokerCalledBeforeInitialize();\n    }\n  };\n  /**\r\n   * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\r\n   */\n  BrowserUtils.detectIEOrEdge = function () {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    var msie11 = ua.indexOf(\"Trident/\");\n    var msedge = ua.indexOf(\"Edge/\");\n    var isIE = msie > 0 || msie11 > 0;\n    var isEdge = msedge > 0;\n    return isIE || isEdge;\n  };\n  return BrowserUtils;\n}();\nexport { BrowserUtils };\n//# sourceMappingURL=BrowserUtils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}