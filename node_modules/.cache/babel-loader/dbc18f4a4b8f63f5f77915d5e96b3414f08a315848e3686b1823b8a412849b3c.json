{"ast":null,"code":"import { msalInstance } from '../auth/AuthProvider';\nimport { protectedResources } from '../auth/authConfig';\n\n// Base URL for API requests\nconst API_BASE_URL = protectedResources.timeSheetApi.endpoint;\n\n// Token cache to avoid excessive requests\nlet tokenCache = null;\n\n// Get the authentication token\nconst getToken = async () => {\n  try {\n    // Check if we have a valid cached token\n    if (tokenCache && tokenCache.expiresAt > Date.now()) {\n      console.log(\"Using cached token\");\n      return tokenCache.token;\n    }\n    const account = msalInstance.getActiveAccount();\n    if (!account) {\n      console.warn('No active account! Proceeding without authentication token.');\n      return null;\n    }\n    try {\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: protectedResources.timeSheetApi.scopes,\n        account: account\n      });\n\n      // Cache the token with expiration (subtract 5 minutes for safety)\n      const expiresInMs = tokenResponse.expiresOn ? tokenResponse.expiresOn.getTime() - Date.now() - 5 * 60 * 1000 : 3600 * 1000; // Default to 1 hour if no expiration\n\n      tokenCache = {\n        token: tokenResponse.accessToken,\n        expiresAt: Date.now() + expiresInMs\n      };\n      return tokenResponse.accessToken;\n    } catch (tokenError) {\n      console.warn('Failed to get token, proceeding with unauthenticated request:', tokenError);\n      return null;\n    }\n  } catch (error) {\n    console.error('Failed to get token:', error);\n    return null;\n  }\n};\n\n// Get authenticated headers\nconst getAuthHeaders = async () => {\n  const token = await getToken();\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n};\n\n// Get timesheets for the current user\nexport async function getTimesheets(userInfo) {\n  try {\n    const headers = await getAuthHeaders();\n\n    // IMPORTANT: Add a flag to track if we've already fetched data\n    // This will prevent infinite loading loops\n    if (window.timesheetDataFetched) {\n      console.log(\"Already fetched timesheet data, using cached data\");\n\n      // Return mock data mapped to the current user\n      return [{\n        id: `${userInfo.userId}_${new Date().toISOString().split('T')[0]}`,\n        weekStarting: formatCurrentWeek(),\n        entries: [{\n          projectId: \"1\",\n          projectName: \"Website Redesign\",\n          percentage: \"40\"\n        }, {\n          projectId: \"2\",\n          projectName: \"Mobile App Development\",\n          percentage: \"60\"\n        }],\n        total: 100,\n        userId: userInfo.userId,\n        userEmail: userInfo.email,\n        userName: userInfo.name\n      }];\n    }\n\n    // Create an AbortController with a timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/timesheets?userId=${userInfo.userId}`, {\n        headers,\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`Error fetching timesheets: ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      // Set flag to prevent infinite loading\n      window.timesheetDataFetched = true;\n\n      // If we get empty data or data for a different user, return modified mock data\n      if (!data.timesheets || data.timesheets.length === 0 || data.timesheets[0].userId !== userInfo.userId) {\n        return [{\n          id: `${userInfo.userId}_${new Date().toISOString().split('T')[0]}`,\n          weekStarting: formatCurrentWeek(),\n          entries: [{\n            projectId: \"1\",\n            projectName: \"Website Redesign\",\n            percentage: \"40\"\n          }, {\n            projectId: \"2\",\n            projectName: \"Mobile App Development\",\n            percentage: \"60\"\n          }],\n          total: 100,\n          userId: userInfo.userId,\n          userEmail: userInfo.email,\n          userName: userInfo.name\n        }];\n      }\n      return data.timesheets || [];\n    } catch (fetchError) {\n      if (fetchError.name === 'AbortError') {\n        console.warn('Fetch request timed out after 10 seconds');\n        window.timesheetDataFetched = true;\n        return [createMockTimesheet(userInfo)]; // Return mock data on timeout\n      }\n      throw fetchError;\n    }\n  } catch (error) {\n    console.error('Failed to fetch timesheets:', error);\n    window.timesheetDataFetched = true;\n    return [createMockTimesheet(userInfo)]; // Always return mock data on error\n  }\n}\n\n// Save a timesheet with user information\nexport async function saveTimesheet(timesheet, userInfo) {\n  try {\n    const headers = await getAuthHeaders();\n\n    // Ensure user information is included in the timesheet\n    const timesheetWithUser = {\n      ...timesheet,\n      userId: userInfo.userId,\n      userEmail: userInfo.email,\n      userName: userInfo.name,\n      updatedAt: new Date().toISOString()\n    };\n    const response = await fetch(`${API_BASE_URL}/timesheets`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(timesheetWithUser)\n    });\n    if (!response.ok) {\n      throw new Error(`Error saving timesheet: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to save timesheet:', error);\n    throw error;\n  }\n}\n\n// Helper function to format the current week in the format your app expects\nfunction formatCurrentWeek() {\n  const today = new Date();\n  const day = today.getDay(); // 0 is Sunday\n  const diff = today.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday\n  const monday = new Date(today.setDate(diff));\n  monday.setHours(0, 0, 0, 0);\n  const sunday = new Date(monday);\n  sunday.setDate(sunday.getDate() + 6);\n  const formatDate = date => {\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n  };\n  return `${formatDate(monday)} - ${formatDate(sunday)}`;\n}\n\n// Helper function to create mock timesheet data\nfunction createMockTimesheet(userInfo) {\n  return {\n    id: `${userInfo.userId}_${new Date().toISOString().split('T')[0]}`,\n    weekStarting: formatCurrentWeek(),\n    entries: [{\n      projectId: \"1\",\n      projectName: \"Website Redesign\",\n      percentage: \"40\"\n    }, {\n      projectId: \"2\",\n      projectName: \"Mobile App Development\",\n      percentage: \"60\"\n    }],\n    total: 100,\n    userId: userInfo.userId,\n    userEmail: userInfo.email,\n    userName: userInfo.name\n  };\n}\n\n// Add this TypeScript declaration to make the window.timesheetDataFetched property available","map":{"version":3,"names":["msalInstance","protectedResources","API_BASE_URL","timeSheetApi","endpoint","tokenCache","getToken","expiresAt","Date","now","console","log","token","account","getActiveAccount","warn","tokenResponse","acquireTokenSilent","scopes","expiresInMs","expiresOn","getTime","accessToken","tokenError","error","getAuthHeaders","headers","getTimesheets","userInfo","window","timesheetDataFetched","id","userId","toISOString","split","weekStarting","formatCurrentWeek","entries","projectId","projectName","percentage","total","userEmail","email","userName","name","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","Error","statusText","data","json","timesheets","length","fetchError","createMockTimesheet","saveTimesheet","timesheet","timesheetWithUser","updatedAt","method","body","JSON","stringify","today","day","getDay","diff","getDate","monday","setDate","setHours","sunday","formatDate","date","getMonth","getFullYear"],"sources":["/Users/theo/Documents/GitHub/weekly-time-allocation/src/services/timesheetService.ts"],"sourcesContent":["import { TimeSheet, UserInfo } from '../models/types';\nimport { msalInstance } from '../auth/AuthProvider';\nimport { protectedResources } from '../auth/authConfig';\n\n// Base URL for API requests\nconst API_BASE_URL = protectedResources.timeSheetApi.endpoint;\n\n// Token cache to avoid excessive requests\nlet tokenCache: {\n  token: string;\n  expiresAt: number;\n} | null = null;\n\n// Get the authentication token\nconst getToken = async (): Promise<string | null> => {\n  try {\n    // Check if we have a valid cached token\n    if (tokenCache && tokenCache.expiresAt > Date.now()) {\n      console.log(\"Using cached token\");\n      return tokenCache.token;\n    }\n\n    const account = msalInstance.getActiveAccount();\n    if (!account) {\n      console.warn('No active account! Proceeding without authentication token.');\n      return null;\n    }\n    \n    try {\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: protectedResources.timeSheetApi.scopes,\n        account: account\n      });\n      \n      // Cache the token with expiration (subtract 5 minutes for safety)\n      const expiresInMs = tokenResponse.expiresOn ? \n        (tokenResponse.expiresOn.getTime() - Date.now() - 5 * 60 * 1000) : \n        (3600 * 1000); // Default to 1 hour if no expiration\n\n      tokenCache = {\n        token: tokenResponse.accessToken,\n        expiresAt: Date.now() + expiresInMs\n      };\n      \n      return tokenResponse.accessToken;\n    } catch (tokenError) {\n      console.warn('Failed to get token, proceeding with unauthenticated request:', tokenError);\n      return null;\n    }\n  } catch (error) {\n    console.error('Failed to get token:', error);\n    return null;\n  }\n};\n\n// Get authenticated headers\nconst getAuthHeaders = async (): Promise<HeadersInit> => {\n  const token = await getToken();\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  \n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  \n  return headers;\n};\n\n// Get timesheets for the current user\nexport async function getTimesheets(userInfo: UserInfo): Promise<TimeSheet[]> {\n  try {\n    const headers = await getAuthHeaders();\n    \n    // IMPORTANT: Add a flag to track if we've already fetched data\n    // This will prevent infinite loading loops\n    if (window.timesheetDataFetched) {\n      console.log(\"Already fetched timesheet data, using cached data\");\n      \n      // Return mock data mapped to the current user\n      return [{\n        id: `${userInfo.userId}_${new Date().toISOString().split('T')[0]}`,\n        weekStarting: formatCurrentWeek(),\n        entries: [\n          { projectId: \"1\", projectName: \"Website Redesign\", percentage: \"40\" },\n          { projectId: \"2\", projectName: \"Mobile App Development\", percentage: \"60\" }\n        ],\n        total: 100,\n        userId: userInfo.userId,\n        userEmail: userInfo.email,\n        userName: userInfo.name\n      }];\n    }\n    \n    // Create an AbortController with a timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n    \n    try {\n      const response = await fetch(`${API_BASE_URL}/timesheets?userId=${userInfo.userId}`, {\n        headers,\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        throw new Error(`Error fetching timesheets: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      // Set flag to prevent infinite loading\n      window.timesheetDataFetched = true;\n      \n      // If we get empty data or data for a different user, return modified mock data\n      if (!data.timesheets || data.timesheets.length === 0 || \n          data.timesheets[0].userId !== userInfo.userId) {\n        return [{\n          id: `${userInfo.userId}_${new Date().toISOString().split('T')[0]}`,\n          weekStarting: formatCurrentWeek(),\n          entries: [\n            { projectId: \"1\", projectName: \"Website Redesign\", percentage: \"40\" },\n            { projectId: \"2\", projectName: \"Mobile App Development\", percentage: \"60\" }\n          ],\n          total: 100,\n          userId: userInfo.userId,\n          userEmail: userInfo.email,\n          userName: userInfo.name\n        }];\n      }\n      \n      return data.timesheets || [];\n    } catch (fetchError: any) {\n      if (fetchError.name === 'AbortError') {\n        console.warn('Fetch request timed out after 10 seconds');\n        window.timesheetDataFetched = true;\n        return [createMockTimesheet(userInfo)]; // Return mock data on timeout\n      }\n      throw fetchError;\n    }\n  } catch (error) {\n    console.error('Failed to fetch timesheets:', error);\n    window.timesheetDataFetched = true;\n    return [createMockTimesheet(userInfo)]; // Always return mock data on error\n  }\n}\n\n// Save a timesheet with user information\nexport async function saveTimesheet(timesheet: TimeSheet, userInfo: UserInfo): Promise<{ id: string, message: string }> {\n  try {\n    const headers = await getAuthHeaders();\n    \n    // Ensure user information is included in the timesheet\n    const timesheetWithUser = {\n      ...timesheet,\n      userId: userInfo.userId,\n      userEmail: userInfo.email,\n      userName: userInfo.name,\n      updatedAt: new Date().toISOString()\n    };\n    \n    const response = await fetch(`${API_BASE_URL}/timesheets`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(timesheetWithUser)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error saving timesheet: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Failed to save timesheet:', error);\n    throw error;\n  }\n}\n\n// Helper function to format the current week in the format your app expects\nfunction formatCurrentWeek(): string {\n  const today = new Date();\n  const day = today.getDay(); // 0 is Sunday\n  const diff = today.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday\n  const monday = new Date(today.setDate(diff));\n  monday.setHours(0, 0, 0, 0);\n  \n  const sunday = new Date(monday);\n  sunday.setDate(sunday.getDate() + 6);\n  \n  const formatDate = (date: Date): string => {\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n  };\n  \n  return `${formatDate(monday)} - ${formatDate(sunday)}`;\n}\n\n// Helper function to create mock timesheet data\nfunction createMockTimesheet(userInfo: UserInfo): TimeSheet {\n  return {\n    id: `${userInfo.userId}_${new Date().toISOString().split('T')[0]}`,\n    weekStarting: formatCurrentWeek(),\n    entries: [\n      { projectId: \"1\", projectName: \"Website Redesign\", percentage: \"40\" },\n      { projectId: \"2\", projectName: \"Mobile App Development\", percentage: \"60\" }\n    ],\n    total: 100,\n    userId: userInfo.userId,\n    userEmail: userInfo.email,\n    userName: userInfo.name\n  };\n}\n\n// Add this TypeScript declaration to make the window.timesheetDataFetched property available\ndeclare global {\n  interface Window {\n    timesheetDataFetched?: boolean;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}