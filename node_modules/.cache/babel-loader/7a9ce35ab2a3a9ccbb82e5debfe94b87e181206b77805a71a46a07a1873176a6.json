{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, ServerError } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, ApiId } from '../utils/BrowserConstants.js';\nimport { InteractionHandler } from './InteractionHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RedirectHandler = /** @class */function (_super) {\n  __extends(RedirectHandler, _super);\n  function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, logger, browserCrypto, performanceClient) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) || this;\n    _this.browserCrypto = browserCrypto;\n    return _this;\n  }\n  /**\r\n   * Redirects window to given URL.\r\n   * @param urlNavigate\r\n   */\n  RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var navigationOptions, navigate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n            if (!!StringUtils.isEmpty(requestUrl)) return [3 /*break*/, 7];\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n              this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n              this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.logger.infoPii(\"RedirectHandler.initiateAuthRequest: Navigate to: \" + requestUrl);\n            navigationOptions = {\n              apiId: ApiId.acquireTokenRedirect,\n              timeout: params.redirectTimeout,\n              noHistory: false\n            };\n            if (!(typeof params.onRedirectNavigate === \"function\")) return [3 /*break*/, 4];\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n            navigate = params.onRedirectNavigate(requestUrl);\n            if (!(navigate !== false)) return [3 /*break*/, 2];\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n          case 2:\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n            return [2 /*return*/];\n          case 3:\n            return [3 /*break*/, 6];\n          case 4:\n            // Navigate window to request URL\n            this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n          case 5:\n            _a.sent();\n            return [2 /*return*/];\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            // Throw error if request URL is empty.\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handle authorization code response in the window.\r\n   * @param hash\r\n   */\n  RedirectHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n            // Check that location hash isn't empty.\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            }\n            // Interaction is completed - remove interaction status.\n            this.browserStorage.setInteractionInProgress(false);\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n            try {\n              authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            } catch (e) {\n              if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw BrowserAuthError.createUserCancelledError();\n              } else {\n                throw e;\n              }\n            }\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n            // Assign code to request\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState;\n            // Add CCS parameters if available\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  return RedirectHandler;\n}(InteractionHandler);\nexport { RedirectHandler };\n//# sourceMappingURL=RedirectHandler.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}