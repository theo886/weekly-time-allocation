{"ast":null,"code":"var _jsxFileName = \"/Users/theo/Documents/GitHub/weekly-time-allocation/src/auth/AuthProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { MsalProvider, useMsal, useIsAuthenticated } from \"@azure/msal-react\";\nimport { PublicClientApplication, EventType, InteractionStatus } from \"@azure/msal-browser\";\nimport { msalConfig } from \"./authConfig\";\n\n// Initialize MSAL instance\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\n// Handle the redirect response\nif (!window.location.hash.includes(\"error\")) {\n  msalInstance.handleRedirectPromise().catch(error => {\n    console.error(\"Redirect handling error:\", error);\n  });\n}\n\n// Default redirect behavior after login\nmsalInstance.addEventCallback(event => {\n  if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n    // The event payload for LOGIN_SUCCESS should contain the account\n    // Safely type check the event payload\n    const payload = event.payload;\n    if (payload.account) {\n      msalInstance.setActiveAccount(payload.account);\n      console.log(\"Login successful, account set:\", payload.account);\n    }\n  }\n});\nexport const MsalAuthProvider = ({\n  children\n}) => {\n  _s();\n  useEffect(() => {\n    // Check if we have active accounts on component mount\n    const accounts = msalInstance.getAllAccounts();\n    if (accounts.length > 0) {\n      msalInstance.setActiveAccount(accounts[0]);\n      console.log(\"Set active account on mount:\", accounts[0]);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MsalProvider, {\n    instance: msalInstance,\n    children: /*#__PURE__*/_jsxDEV(AuthenticationHandler, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n// Component to handle authentication state\n_s(MsalAuthProvider, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MsalAuthProvider;\nconst AuthenticationHandler = ({\n  children\n}) => {\n  _s2();\n  const {\n    instance,\n    inProgress\n  } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n  useEffect(() => {\n    // If no active account is set but we have accounts in the cache,\n    // set the first one as active\n    if (!isAuthenticated && inProgress === InteractionStatus.None) {\n      const accounts = instance.getAllAccounts();\n      if (accounts.length > 0) {\n        // Check if there's already an active account to avoid unnecessary updates\n        const activeAccount = instance.getActiveAccount();\n        if (!activeAccount) {\n          instance.setActiveAccount(accounts[0]);\n          console.log(\"Set active account from handler:\", accounts[0]);\n        }\n      }\n    }\n  }, [instance, inProgress, isAuthenticated]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n// Custom hook to get the currently authenticated user\n_s2(AuthenticationHandler, \"HIGuzhT4iqmtOpeWvjE2ERy54js=\", false, function () {\n  return [useMsal, useIsAuthenticated];\n});\n_c2 = AuthenticationHandler;\nexport const useCurrentUser = () => {\n  _s3();\n  const {\n    accounts\n  } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n  if (!isAuthenticated || accounts.length === 0) {\n    return null;\n  }\n  return accounts[0];\n};\n\n// Get user information from the account\n_s3(useCurrentUser, \"4bSyJPyjxUAyjoisFRo1hFe/TtM=\", false, function () {\n  return [useMsal, useIsAuthenticated];\n});\nexport const getUserInfo = account => {\n  if (!account) return null;\n  return {\n    username: account.username,\n    name: account.name || account.username,\n    email: account.username,\n    userId: account.localAccountId,\n    tenantId: account.tenantId\n  };\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"MsalAuthProvider\");\n$RefreshReg$(_c2, \"AuthenticationHandler\");","map":{"version":3,"names":["React","useEffect","MsalProvider","useMsal","useIsAuthenticated","PublicClientApplication","EventType","InteractionStatus","msalConfig","jsxDEV","_jsxDEV","Fragment","_Fragment","msalInstance","window","location","hash","includes","handleRedirectPromise","catch","error","console","addEventCallback","event","eventType","LOGIN_SUCCESS","payload","account","setActiveAccount","log","MsalAuthProvider","children","_s","accounts","getAllAccounts","length","instance","AuthenticationHandler","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s2","inProgress","isAuthenticated","None","activeAccount","getActiveAccount","_c2","useCurrentUser","_s3","getUserInfo","username","name","email","userId","localAccountId","tenantId","$RefreshReg$"],"sources":["/Users/theo/Documents/GitHub/weekly-time-allocation/src/auth/AuthProvider.tsx"],"sourcesContent":["import React, { ReactNode, useEffect } from \"react\";\nimport { MsalProvider, useMsal, useIsAuthenticated } from \"@azure/msal-react\";\nimport { PublicClientApplication, EventType, AccountInfo, InteractionStatus } from \"@azure/msal-browser\";\nimport { msalConfig, loginRequest } from \"./authConfig\";\n\n// Initialize MSAL instance\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\n// Handle the redirect response\nif (!window.location.hash.includes(\"error\")) {\n  msalInstance.handleRedirectPromise().catch(error => {\n    console.error(\"Redirect handling error:\", error);\n  });\n}\n\n// Default redirect behavior after login\nmsalInstance.addEventCallback(event => {\n  if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n    // The event payload for LOGIN_SUCCESS should contain the account\n    // Safely type check the event payload\n    const payload = event.payload as { account?: AccountInfo };\n    if (payload.account) {\n      msalInstance.setActiveAccount(payload.account);\n      console.log(\"Login successful, account set:\", payload.account);\n    }\n  }\n});\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const MsalAuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  useEffect(() => {\n    // Check if we have active accounts on component mount\n    const accounts = msalInstance.getAllAccounts();\n    if (accounts.length > 0) {\n      msalInstance.setActiveAccount(accounts[0]);\n      console.log(\"Set active account on mount:\", accounts[0]);\n    }\n  }, []);\n\n  return (\n    <MsalProvider instance={msalInstance}>\n      <AuthenticationHandler>\n        {children}\n      </AuthenticationHandler>\n    </MsalProvider>\n  );\n};\n\n// Component to handle authentication state\nconst AuthenticationHandler: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const { instance, inProgress } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n  \n  useEffect(() => {\n    // If no active account is set but we have accounts in the cache,\n    // set the first one as active\n    if (!isAuthenticated && inProgress === InteractionStatus.None) {\n      const accounts = instance.getAllAccounts();\n      if (accounts.length > 0) {\n        // Check if there's already an active account to avoid unnecessary updates\n        const activeAccount = instance.getActiveAccount();\n        if (!activeAccount) {\n          instance.setActiveAccount(accounts[0]);\n          console.log(\"Set active account from handler:\", accounts[0]);\n        }\n      }\n    }\n  }, [instance, inProgress, isAuthenticated]);\n  \n  return <>{children}</>;\n};\n\n// Custom hook to get the currently authenticated user\nexport const useCurrentUser = () => {\n  const { accounts } = useMsal();\n  const isAuthenticated = useIsAuthenticated();\n  \n  if (!isAuthenticated || accounts.length === 0) {\n    return null;\n  }\n  \n  return accounts[0];\n};\n\n// Get user information from the account\nexport const getUserInfo = (account: AccountInfo | null) => {\n  if (!account) return null;\n  \n  return {\n    username: account.username,\n    name: account.name || account.username,\n    email: account.username,\n    userId: account.localAccountId,\n    tenantId: account.tenantId\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}