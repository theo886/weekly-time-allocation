{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\nvar FetchClient = /** @class */function () {\n  function FetchClient() {}\n  /**\r\n   * Fetch Client for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  FetchClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, fetch(url, {\n              method: HTTP_REQUEST_TYPE.GET,\n              headers: this.getFetchHeaders(options)\n            })];\n          case 1:\n            response = _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_1 = _b.sent();\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createGetRequestFailedError(e_1, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n          case 3:\n            _b.trys.push([3, 5,, 6]);\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4 /*yield*/, response.json()];\n          case 4:\n            return [2 /*return*/, (_a.body = _b.sent(), _a.status = response.status, _a)];\n          case 5:\n            _b.sent();\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Fetch Client for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  FetchClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqBody, response, e_3, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            reqBody = options && options.body || Constants.EMPTY_STRING;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, fetch(url, {\n              method: HTTP_REQUEST_TYPE.POST,\n              headers: this.getFetchHeaders(options),\n              body: reqBody\n            })];\n          case 2:\n            response = _b.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_3 = _b.sent();\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createPostRequestFailedError(e_3, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n          case 4:\n            _b.trys.push([4, 6,, 7]);\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4 /*yield*/, response.json()];\n          case 5:\n            return [2 /*return*/, (_a.body = _b.sent(), _a.status = response.status, _a)];\n          case 6:\n            _b.sent();\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get Fetch API Headers object from string map\r\n   * @param inputHeaders\r\n   */\n  FetchClient.prototype.getFetchHeaders = function (options) {\n    var headers = new Headers();\n    if (!(options && options.headers)) {\n      return headers;\n    }\n    var optionsHeaders = options.headers;\n    Object.keys(optionsHeaders).forEach(function (key) {\n      headers.append(key, optionsHeaders[key]);\n    });\n    return headers;\n  };\n  FetchClient.prototype.getHeaderDict = function (headers) {\n    var headerDict = {};\n    headers.forEach(function (value, key) {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  };\n  return FetchClient;\n}();\nexport { FetchClient };\n//# sourceMappingURL=FetchClient.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}