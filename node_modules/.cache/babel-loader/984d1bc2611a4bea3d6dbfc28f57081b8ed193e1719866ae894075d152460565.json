{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator, __spread, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, ServerTelemetryManager, AccountEntity, AuthenticationScheme, ClientConfigurationError, StringUtils, PerformanceEvents, AuthorityFactory } from '@azure/msal-common';\nimport { version } from '../packageMetadata.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar BaseInteractionClient = /** @class */function () {\n  function BaseInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {\n    this.config = config;\n    this.browserStorage = storageImpl;\n    this.browserCrypto = browserCrypto;\n    this.networkClient = this.config.system.networkClient;\n    this.eventHandler = eventHandler;\n    this.navigationClient = navigationClient;\n    this.nativeMessageHandler = nativeMessageHandler;\n    this.correlationId = correlationId || this.browserCrypto.createNewGuid();\n    this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    this.performanceClient = performanceClient;\n  }\n  BaseInteractionClient.prototype.clearCacheOnLogout = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!account) return [3 /*break*/, 5];\n            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n              this.logger.verbose(\"Setting active account to null\");\n              this.browserStorage.setActiveAccount(null);\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account))];\n          case 2:\n            _a.sent();\n            this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            return [3 /*break*/, 4];\n          case 3:\n            _a.sent();\n            this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            return [3 /*break*/, 4];\n          case 4:\n            return [3 /*break*/, 9];\n          case 5:\n            _a.trys.push([5, 8,, 9]);\n            this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\n            // Clear all accounts and tokens\n            return [4 /*yield*/, this.browserStorage.clear()];\n          case 6:\n            // Clear all accounts and tokens\n            _a.sent();\n            // Clear any stray keys from IndexedDB\n            return [4 /*yield*/, this.browserCrypto.clearKeystore()];\n          case 7:\n            // Clear any stray keys from IndexedDB\n            _a.sent();\n            return [3 /*break*/, 9];\n          case 8:\n            _a.sent();\n            this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            return [3 /*break*/, 9];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer function for all request APIs\r\n   * @param request\r\n   */\n  BaseInteractionClient.prototype.initializeBaseRequest = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authority, scopes, validatedRequest, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n            this.logger.verbose(\"Initializing BaseAuthRequest\");\n            authority = request.authority || this.config.auth.authority;\n            if (!account) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.validateRequestAuthority(authority, account)];\n          case 1:\n            _b.sent();\n            _b.label = 2;\n          case 2:\n            scopes = __spread(request && request.scopes || []);\n            validatedRequest = __assign(__assign({}, request), {\n              correlationId: this.correlationId,\n              authority: authority,\n              scopes: scopes\n            });\n            // Set authenticationScheme to BEARER if not explicitly set in the request\n            if (!validatedRequest.authenticationScheme) {\n              validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n              this.logger.verbose(\"Authentication Scheme wasn't explicitly set in request, defaulting to \\\"Bearer\\\" request\");\n            } else {\n              if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n                if (!request.sshJwk) {\n                  throw ClientConfigurationError.createMissingSshJwkError();\n                }\n                if (!request.sshKid) {\n                  throw ClientConfigurationError.createMissingSshKidError();\n                }\n              }\n              this.logger.verbose(\"Authentication Scheme set to \\\"\" + validatedRequest.authenticationScheme + \"\\\" as configured in Auth request\");\n            }\n            if (!(this.config.cache.claimsBasedCachingEnabled && request.claims && !StringUtils.isEmptyObj(request.claims))) return [3 /*break*/, 4];\n            _a = validatedRequest;\n            return [4 /*yield*/, this.browserCrypto.hashString(request.claims)];\n          case 3:\n            _a.requestedClaimsHash = _b.sent();\n            _b.label = 4;\n          case 4:\n            return [2 /*return*/, validatedRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * Use to get the redirect uri configured in MSAL or null.\r\n   * @param requestRedirectUri\r\n   * @returns Redirect URL\r\n   *\r\n   */\n  BaseInteractionClient.prototype.getRedirectUri = function (requestRedirectUri) {\n    this.logger.verbose(\"getRedirectUri called\");\n    var redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();\n    return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());\n  };\n  /*\r\n   * If authority provided in the request does not match environment/authority specified\r\n   * in the account or MSAL config, we throw an error.\r\n   */\n  BaseInteractionClient.prototype.validateRequestAuthority = function (authority, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var discoveredAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getDiscoveredAuthority(authority)];\n          case 1:\n            discoveredAuthority = _a.sent();\n            if (!discoveredAuthority.isAlias(account.environment)) {\n              throw ClientConfigurationError.createAuthorityMismatchError();\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param apiId\r\n   * @param correlationId\r\n   * @param forceRefresh\r\n   */\n  BaseInteractionClient.prototype.initializeServerTelemetryManager = function (apiId, forceRefresh) {\n    this.logger.verbose(\"initializeServerTelemetryManager called\");\n    var telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: this.correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false,\n      wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n      wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n    };\n    return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n  };\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n  BaseInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var authorityOptions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"getDiscoveredAuthority called\");\n            authorityOptions = {\n              protocolMode: this.config.auth.protocolMode,\n              knownAuthorities: this.config.auth.knownAuthorities,\n              cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n              authorityMetadata: this.config.auth.authorityMetadata\n            };\n            if (!requestAuthority) return [3 /*break*/, 2];\n            this.logger.verbose(\"Creating discovered authority with request authority\");\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            this.logger.verbose(\"Creating discovered authority with configured authority\");\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return BaseInteractionClient;\n}();\nexport { BaseInteractionClient };\n//# sourceMappingURL=BaseInteractionClient.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}