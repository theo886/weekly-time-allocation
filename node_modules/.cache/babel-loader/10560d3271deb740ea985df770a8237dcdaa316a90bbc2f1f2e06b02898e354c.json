{"ast":null,"code":"/*! @azure/msal-common v13.3.3 2024-06-06 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\nvar AuthenticationHeaderParser = /** @class */function () {\n  function AuthenticationHeaderParser(headers) {\n    this.headers = headers;\n  }\n  /**\r\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n   * @returns\r\n   */\n  AuthenticationHeaderParser.prototype.getShrNonce = function () {\n    // Attempt to parse nonce from Authentiacation-Info\n    var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n    if (authenticationInfo) {\n      var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n    }\n    // Attempt to parse nonce from WWW-Authenticate\n    var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n    if (wwwAuthenticate) {\n      var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n    }\n    // If neither header is present, throw missing headers error\n    throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n  };\n  /**\r\n   * Parses an HTTP header's challenge set into a key/value map.\r\n   * @param header\r\n   * @returns\r\n   */\n  AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\n    var schemeSeparator = header.indexOf(\" \");\n    var challenges = header.substr(schemeSeparator + 1).split(\",\");\n    var challengeMap = {};\n    challenges.forEach(function (challenge) {\n      var _a = challenge.split(\"=\"),\n        key = _a[0],\n        value = _a[1];\n      // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  };\n  return AuthenticationHeaderParser;\n}();\nexport { AuthenticationHeaderParser };\n//# sourceMappingURL=AuthenticationHeaderParser.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}