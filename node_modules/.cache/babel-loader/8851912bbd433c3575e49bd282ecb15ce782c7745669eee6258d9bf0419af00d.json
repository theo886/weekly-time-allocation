{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{Calendar,Plus,X,AlertCircle,Loader2}from'lucide-react';import{Card,CardHeader,CardTitle,CardContent,CardFooter}from'./ui/card';import{Button}from'./ui/button';import{Input}from'./ui/input';import{Select}from'./ui/select';import{Alert,AlertDescription}from'./ui/alert';import{saveTimesheet,getTimesheets}from'../services/timesheetService';import{useCurrentUser,getUserInfo}from'../auth/AuthProvider';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const WeeklyPercentageTracker=()=>{// Sample projects data\nconst projects=[{id:1,name:\"Website Redesign\",code:\"WEB-001\"},{id:2,name:\"Mobile App Development\",code:\"APP-002\"},{id:3,name:\"Internal Dashboard\",code:\"DASH-003\"},{id:4,name:\"Client Onboarding System\",code:\"CL-004\"},{id:5,name:\"Infrastructure Upgrade\",code:\"INF-005\"},{id:6,name:\"Data Migration\",code:\"DM-006\"},{id:7,name:\"Security Audit\",code:\"SEC-007\"},{id:8,name:\"Training & Documentation\",code:\"TD-008\"}];// State for the current week\nconst[currentWeek,setCurrentWeek]=useState(()=>{const today=new Date();const day=today.getDay();// 0 is Sunday\nconst diff=today.getDate()-day+(day===0?-6:1);// Adjust when day is Sunday\nconst monday=new Date(today.setDate(diff));monday.setHours(0,0,0,0);return monday;});// State for project time entries\nconst[entries,setEntries]=useState([{id:Date.now(),projectId:\"\",percentage:\"100\",isManuallySet:false}]);// State to track manually edited entries\nconst[manuallyEditedIds,setManuallyEditedIds]=useState(new Set());// State to track if any dropdown is open\nconst[isAnyDropdownOpen,setIsAnyDropdownOpen]=useState(false);// State to track if current allocation is pinned\nconst[isPinned,setIsPinned]=useState(false);// State for error\nconst[error,setError]=useState(\"\");// State to store previous week's entries\nconst[previousSubmissions,setPreviousSubmissions]=useState({});// State to track if current week is submitted\nconst[isSubmitted,setIsSubmitted]=useState(false);// State to track if submitted data has been modified\nconst[isModified,setIsModified]=useState(false);// State to track API saving status\nconst[isSaving,setIsSaving]=useState(false);// State to track API error\nconst[apiError,setApiError]=useState(\"\");// Get the current authenticated user\nconst currentUser=useCurrentUser();const userInfo=getUserInfo(currentUser);// State to track if data is loading\nconst[isLoading,setIsLoading]=useState(false);// Format date range for the week\nconst formatWeekRange=startDate=>{const endDate=new Date(startDate);endDate.setDate(endDate.getDate()+6);const formatDate=date=>{return`${date.getMonth()+1}/${date.getDate()}/${date.getFullYear()}`;};return`${formatDate(startDate)} - ${formatDate(endDate)}`;};// Define loadUserTimesheets as a useCallback function\nconst loadUserTimesheets=useCallback(async()=>{if(!userInfo)return;setIsLoading(true);setApiError(\"\");try{const userTimesheets=await getTimesheets(userInfo);console.log(\"Loaded user timesheets:\",userTimesheets);if(userTimesheets&&userTimesheets.length>0){// Build a record of entries by week\nconst submissionsByWeek={};userTimesheets.forEach(sheet=>{// Convert API entries to local TimeEntry format\nconst entries=sheet.entries.map((entry,index)=>({id:Date.now()+index,// Generate unique IDs\nprojectId:entry.projectId,percentage:entry.percentage,isManuallySet:true}));submissionsByWeek[sheet.weekStarting]=entries;});setPreviousSubmissions(submissionsByWeek);// Check if we have data for the current week\nconst currentWeekKey=formatWeekRange(currentWeek);if(submissionsByWeek[currentWeekKey]){setEntries(submissionsByWeek[currentWeekKey].map(entry=>({...entry,id:Date.now()+Math.random()// Generate new IDs\n})));setIsSubmitted(true);}}}catch(error){console.error(\"Failed to load user timesheets:\",error);setApiError(\"Failed to load your timesheet data. Please refresh and try again.\");}finally{setIsLoading(false);}},[userInfo,currentWeek,formatWeekRange]);// Navigate to previous week\nconst goToPreviousWeek=()=>{const prevWeek=new Date(currentWeek);prevWeek.setDate(prevWeek.getDate()-7);setCurrentWeek(prevWeek);// If pinned, keep the current entries\nif(isPinned){// Just clone the current entries with new IDs\nsetEntries(entries.map(entry=>({...entry,id:Date.now()+Math.random()// Generate new IDs\n})));setIsSubmitted(false);setIsModified(false);}else{// Check if we have stored entries for the previous week\nconst prevWeekKey=formatWeekRange(prevWeek);const previousWeekEntries=previousSubmissions[prevWeekKey];// Check if the previous week was submitted\nsetIsSubmitted(!!previousWeekEntries);setIsModified(false);// If we have previous entries for this week, use them\nif(previousWeekEntries&&previousWeekEntries.length>0){setEntries(previousWeekEntries.map(entry=>({...entry,id:Date.now()+Math.random()// Generate new IDs\n})));}else{// Otherwise start with a blank slate\nsetEntries([{id:Date.now(),projectId:\"\",percentage:\"100\",isManuallySet:false}]);setManuallyEditedIds(new Set());}}};// Navigate to next week\nconst goToNextWeek=()=>{const nextWeek=new Date(currentWeek);nextWeek.setDate(nextWeek.getDate()+7);setCurrentWeek(nextWeek);// If pinned, keep the current entries\nif(isPinned){// Just clone the current entries with new IDs\nsetEntries(entries.map(entry=>({...entry,id:Date.now()+Math.random()// Generate new IDs\n})));setIsSubmitted(false);setIsModified(false);}else{// Get the next week's entries if they exist\nconst nextWeekKey=formatWeekRange(nextWeek);const previousWeekEntries=previousSubmissions[nextWeekKey];// Check if the next week was submitted\nsetIsSubmitted(!!previousWeekEntries);setIsModified(false);// If we have previous entries for the next week, use them\nif(previousWeekEntries&&previousWeekEntries.length>0){setEntries(previousWeekEntries.map(entry=>({...entry,id:Date.now()+Math.random()// Generate new IDs\n})));}else{// Otherwise start with a blank slate\nsetEntries([{id:Date.now(),projectId:\"\",percentage:\"100\",isManuallySet:false}]);setManuallyEditedIds(new Set());}}};// Add a new entry\nconst addEntry=()=>{// If already submitted, mark as modified\nif(isSubmitted){setIsModified(true);}// Get all manually edited entries\nconst manualEntries=entries.filter(entry=>manuallyEditedIds.has(entry.id));// Calculate the sum of manually set percentages\nconst manualSum=manualEntries.reduce((sum,entry)=>{return sum+(parseInt(entry.percentage)||0);},0);// Calculate how many entries we'll have after adding a new one\nconst newCount=entries.length+1;// Calculate how many non-manual entries we'll have (including the new one)\nconst nonManualCount=newCount-manualEntries.length;// Calculate the remaining percentage to distribute\nconst remainingPercentage=Math.max(0,100-manualSum);// Calculate equal share for non-manual entries\nconst equalShare=nonManualCount>0?Math.floor(remainingPercentage/nonManualCount):0;// Create the new entry\nconst newEntry={id:Date.now(),projectId:\"\",percentage:equalShare.toString(),isManuallySet:false};// Create updated entries list\nconst updatedEntries=[...entries.map(entry=>{// Adjust percentages for non-manual entries\nif(!manuallyEditedIds.has(entry.id)){return{...entry,percentage:equalShare.toString()};}return entry;}),newEntry];setEntries(updatedEntries);};// Remove an entry\nconst removeEntry=id=>{// If already submitted, mark as modified\nif(isSubmitted){setIsModified(true);}if(entries.length>1){// Check if the entry being removed was manually set\nconst isManuallySet=manuallyEditedIds.has(id);// Remove the entry\nconst filteredEntries=entries.filter(entry=>entry.id!==id);// If we're removing a manually set entry, update the manual IDs set\nif(isManuallySet){setManuallyEditedIds(prev=>{const newSet=new Set(prev);newSet.delete(id);return newSet;});}// Get all manually edited entries after removal\nconst manualEntries=filteredEntries.filter(entry=>manuallyEditedIds.has(entry.id));// Calculate the sum of manually set percentages\nconst manualSum=manualEntries.reduce((sum,entry)=>{return sum+(parseInt(entry.percentage)||0);},0);// Calculate how many non-manual entries we have\nconst nonManualEntries=filteredEntries.filter(entry=>!manuallyEditedIds.has(entry.id));// If we have non-manual entries, distribute the remaining percentage\nif(nonManualEntries.length>0){const remainingPercentage=Math.max(0,100-manualSum);const equalShare=remainingPercentage>0?Math.floor(remainingPercentage/nonManualEntries.length):0;// Distribute the remaining percentage equally\nconst result=filteredEntries.map(entry=>{if(!manuallyEditedIds.has(entry.id)){return{...entry,percentage:equalShare.toString()};}return entry;});setEntries(result);}else{setEntries(filteredEntries);}}};// Update an entry\nconst updateEntry=(id,field,value)=>{// If already submitted, mark as modified\nif(isSubmitted){setIsModified(true);}const updatedEntries=entries.map(entry=>{if(entry.id===id){// If updating percentage, mark as manually set\nif(field==='percentage'){setManuallyEditedIds(prev=>{const newSet=new Set(prev);newSet.add(id);return newSet;});return{...entry,[field]:value,isManuallySet:true};}return{...entry,[field]:value};}return entry;});// Only redistribute if percentage was updated\nif(field==='percentage'){redistributePercentages(updatedEntries,id);}else{setEntries(updatedEntries);}};// Redistribute percentages when an entry is manually changed\nconst redistributePercentages=(updatedEntries,changedId)=>{// Get all manually set entries (including the one just changed)\nconst manualEntries=updatedEntries.filter(entry=>entry.id===changedId||manuallyEditedIds.has(entry.id));// Calculate the sum of manually set percentages\nconst manualSum=manualEntries.reduce((sum,entry)=>{return sum+(parseInt(entry.percentage)||0);},0);// Calculate how many non-manual entries we have\nconst nonManualEntries=updatedEntries.filter(entry=>entry.id!==changedId&&!manuallyEditedIds.has(entry.id));// If we have non-manual entries, distribute the remaining percentage\nif(nonManualEntries.length>0){const remainingPercentage=Math.max(0,100-manualSum);const equalShare=remainingPercentage>0?Math.floor(remainingPercentage/nonManualEntries.length):0;// Distribute the remaining percentage equally\nconst result=updatedEntries.map(entry=>{if(entry.id!==changedId&&!manuallyEditedIds.has(entry.id)){return{...entry,percentage:equalShare.toString()};}return entry;});setEntries(result);}else{setEntries(updatedEntries);}};// Calculate total percentage\nconst calculateTotal=()=>{return entries.reduce((sum,entry)=>{const percentage=parseInt(entry.percentage)||0;return sum+percentage;},0);};// Validate entries before submission\nuseEffect(()=>{const total=calculateTotal();if(total>100){setError(\"Total percentage exceeds 100%\");}else if(entries.some(entry=>isDuplicateProject(entry.projectId)&&entry.projectId)){setError(\"Duplicate projects are not allowed\");}else{setError(\"\");}},[entries]);// Check for duplicate projects\nconst isDuplicateProject=projectId=>{return entries.filter(entry=>entry.projectId===projectId).length>1;};// Check if current week is already in previousSubmissions\nuseEffect(()=>{const weekKey=formatWeekRange(currentWeek);const isWeekSubmitted=!!previousSubmissions[weekKey];setIsSubmitted(isWeekSubmitted);setIsModified(false);},[currentWeek,previousSubmissions]);// useEffect to load user timesheets only when user is available or week changes\nuseEffect(()=>{// Only attempt to load if we have a user\nif(userInfo&&userInfo.userId){const weekKey=formatWeekRange(currentWeek);console.log(`Loading timesheets for week: ${weekKey} and user: ${userInfo.userId}`);// If we already have this week's data, don't reload it\nif(previousSubmissions[weekKey]){console.log(\"Using cached timesheet data for this week\");const previousWeekEntries=previousSubmissions[weekKey];// Check if the week was submitted\nsetIsSubmitted(!!previousWeekEntries);setIsModified(false);// If we have entries for this week, use them\nif(previousWeekEntries&&previousWeekEntries.length>0){setEntries(previousWeekEntries.map(entry=>({...entry,id:Date.now()+Math.random()// Generate new IDs\n})));}return;}loadUserTimesheets();}},[userInfo===null||userInfo===void 0?void 0:userInfo.userId,currentWeek,loadUserTimesheets,previousSubmissions,formatWeekRange]);// Submit the timesheet\nconst submitTimesheet=async()=>{// Check if user is authenticated\nif(!userInfo){setApiError(\"You must be signed in to submit a timesheet.\");return;}const total=calculateTotal();if(total!==100){setError(\"Total percentage must equal 100%\");return;}if(entries.some(entry=>!entry.projectId)){setError(\"Please select a project for all entries\");return;}// Check for duplicate projects\nconst projectIds=entries.map(entry=>entry.projectId);const uniqueProjectIds=new Set(projectIds);if(uniqueProjectIds.size!==projectIds.length){setError(\"Duplicate projects are not allowed\");return;}// Prepare timesheet data for API submission\nconst timesheetData={weekStarting:formatWeekRange(currentWeek),userId:userInfo.userId,userEmail:userInfo.email,userName:userInfo.name,entries:entries.map(entry=>{var _projects$find;return{projectId:entry.projectId,projectName:(_projects$find=projects.find(p=>p.id.toString()===entry.projectId))===null||_projects$find===void 0?void 0:_projects$find.name,percentage:entry.percentage};}),total:total};console.log(\"Submitting timesheet:\",timesheetData);// Set loading state\nsetIsSaving(true);setApiError(\"\");try{// Call the API to save the timesheet\nconst result=await saveTimesheet(timesheetData,userInfo);console.log(\"API response:\",result);// Store this week's entries for future reference (local memory cache)\nconst weekKey=formatWeekRange(currentWeek);setPreviousSubmissions({...previousSubmissions,[weekKey]:[...entries]});// Update submission state\nsetIsSubmitted(true);setIsModified(false);// Show message based on whether this is an update or new submission\nif(isModified){alert(\"Timesheet updated successfully!\");}else{alert(\"Timesheet submitted successfully!\");}}catch(error){console.error(\"Failed to save timesheet:\",error);setApiError(\"Failed to save timesheet. Please try again.\");}finally{setIsSaving(false);}};// Get button text and style based on submission state\nconst getButtonProps=()=>{if(isSaving){return{text:\"Saving...\",className:\"bg-indigo-400 text-white px-8 py-2 rounded cursor-wait\"};}else if(isSubmitted){if(isModified){return{text:\"Update\",className:\"bg-indigo-600 hover:bg-indigo-700 text-white px-8 py-2 rounded\"};}else{return{text:\"Submitted\",className:\"bg-slate-400 hover:bg-slate-500 text-white px-8 py-2 rounded cursor-default\"};}}else{return{text:\"Submit\",className:\"bg-indigo-600 hover:bg-indigo-700 text-white px-8 py-2 rounded\"};}};// Check if button should be disabled\nconst isButtonDisabled=()=>{return calculateTotal()!==100||!!error&&error!==\"Please select a project for all entries\"&&error!==\"Please enter percentage for all selected projects\"||isSubmitted&&!isModified||isSaving;};return/*#__PURE__*/_jsx(\"div\",{className:\"max-w-2xl mx-auto p-4\",children:isLoading?/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center items-center h-64\",children:[/*#__PURE__*/_jsx(Loader2,{className:\"h-12 w-12 animate-spin text-indigo-600\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ml-4 text-lg text-slate-700\",children:\"Loading your timesheet data...\"})]}):/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(CardHeader,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(CardTitle,{className:\"flex items-center text-indigo-800\",children:[/*#__PURE__*/_jsx(Calendar,{className:\"h-5 w-5 mr-2 text-indigo-600\"}),\"Weekly Time Allocation\"]})}),userInfo&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-right\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium\",children:userInfo.name}),/*#__PURE__*/_jsx(\"div\",{className:\"text-slate-500 text-xs\",children:userInfo.email})]})]})}),/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-center mb-3\",children:[/*#__PURE__*/_jsx(Button,{variant:\"ghost\",onClick:()=>{console.log(\"Pin button clicked, current state:\",isPinned);setIsPinned(!isPinned);},className:`mr-2 ${isPinned?'text-red-500':'text-slate-400'}`,title:isPinned?\"Unpin current allocations\":\"Pin current allocations\",children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 384 512\",fill:isPinned?\"currentColor\":\"none\",stroke:\"currentColor\",strokeWidth:isPinned?\"0\":\"1\",className:\"w-5 h-5\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M298.7 174.7c47.6 7 85.3 48.5 85.3 97.3 0 53-43 96-96 96h-32l-32 144H160l-32-144H96c-53  0-96-43-96-96 0-48.8 37.7-90.3 85.3-97.3C77 143.5 64 118 64 90.7 64 40.6 105.6 0 155.7  0h72.6c50.2 0 91.7 40.6 91.7 90.7 0 27.4-13 52.8-33.3 84z\"})})}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-lg font-semibold text-slate-800\",children:[\"Week of \",formatWeekRange(currentWeek)]})]}),error&&error!==\"Please select a project for all entries\"&&error!==\"Please enter percentage for all selected projects\"&&/*#__PURE__*/_jsx(Alert,{className:\"mb-4 bg-red-50 text-red-800 border border-red-200\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center\",children:[/*#__PURE__*/_jsx(AlertCircle,{className:\"h-4 w-4\"}),/*#__PURE__*/_jsx(AlertDescription,{children:error})]})}),apiError&&/*#__PURE__*/_jsx(Alert,{className:\"mb-4 bg-red-50 text-red-800 border border-red-200\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center\",children:[/*#__PURE__*/_jsx(AlertCircle,{className:\"h-4 w-4\"}),/*#__PURE__*/_jsx(AlertDescription,{children:apiError})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-3\",children:[entries.map(entry=>/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-12 gap-3 items-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-span-8\",children:/*#__PURE__*/_jsx(Select,{value:entry.projectId,projects:projects,onValueChange:value=>updateEntry(entry.id,\"projectId\",value),onOpenChange:open=>setIsAnyDropdownOpen(open)})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-span-3\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"relative\",children:[/*#__PURE__*/_jsx(Input,{type:\"number\",min:\"0\",max:\"100\",placeholder:\"%\",value:entry.percentage,onChange:e=>updateEntry(entry.id,\"percentage\",e.target.value),className:\"pr-6\"}),/*#__PURE__*/_jsx(\"span\",{className:\"absolute right-3 top-2 text-gray-500\",children:\"%\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-span-1 flex justify-end\",children:entries.length>1&&/*#__PURE__*/_jsx(Button,{variant:\"ghost\",onClick:()=>removeEntry(entry.id),className:\"h-8 w-8 text-red-500 hover:text-red-700 hover:bg-red-50\",children:/*#__PURE__*/_jsx(X,{className:\"h-4 w-4\"})})})]},entry.id)),/*#__PURE__*/_jsx(\"div\",{className:\"pt-2\",children:/*#__PURE__*/_jsx(Button,{variant:\"outline\",onClick:addEntry,disabled:isAnyDropdownOpen,className:\"w-full border border-dashed border-indigo-300 text-indigo-600 hover:bg-indigo-50 py-2 rounded-md\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-center\",children:[/*#__PURE__*/_jsx(Plus,{className:\"h-4 w-4 mr-2\"}),\"Add Project\"]})})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-6 pt-4 border-t flex justify-between items-center text-lg font-medium\",children:[/*#__PURE__*/_jsxs(Button,{variant:\"ghost\",className:\"text-slate-600 flex items-center\",onClick:goToPreviousWeek,children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"20\",height:\"20\",viewBox:\"0 0 24 24\",fill:\"none\",stroke:\"currentColor\",strokeWidth:\"2\",strokeLinecap:\"round\",strokeLinejoin:\"round\",className:\"mr-1\",children:/*#__PURE__*/_jsx(\"path\",{d:\"m15 18-6-6 6-6\"})}),/*#__PURE__*/_jsx(\"span\",{children:\"Prev\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center font-medium\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"mr-2\",children:\"Total:\"}),/*#__PURE__*/_jsxs(\"span\",{className:calculateTotal()===100?\"text-green-600\":\"text-red-600\",children:[calculateTotal(),\"%\"]})]}),/*#__PURE__*/_jsxs(Button,{variant:\"ghost\",className:\"text-slate-600 flex items-center\",onClick:goToNextWeek,children:[/*#__PURE__*/_jsx(\"span\",{children:\"Next\"}),/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"20\",height:\"20\",viewBox:\"0 0 24 24\",fill:\"none\",stroke:\"currentColor\",strokeWidth:\"2\",strokeLinecap:\"round\",strokeLinejoin:\"round\",className:\"ml-1\",children:/*#__PURE__*/_jsx(\"path\",{d:\"m9 18 6-6-6-6\"})})]})]})]}),/*#__PURE__*/_jsx(CardFooter,{children:/*#__PURE__*/_jsx(Button,{onClick:submitTimesheet,className:getButtonProps().className,disabled:isButtonDisabled(),children:isSaving?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Loader2,{className:\"mr-2 h-4 w-4 animate-spin\"}),getButtonProps().text]}):getButtonProps().text})})]})});};export default WeeklyPercentageTracker;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}