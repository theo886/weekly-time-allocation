{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CryptoOps } from './CryptoOps.js';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SignedHttpRequest = /** @class */function () {\n  function SignedHttpRequest(shrParameters, shrOptions) {\n    var loggerOptions = shrOptions && shrOptions.loggerOptions || {};\n    this.logger = new Logger(loggerOptions, name, version);\n    this.cryptoOps = new CryptoOps(this.logger);\n    this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n    this.shrParameters = shrParameters;\n  }\n  /**\r\n   * Generates and caches a keypair for the given request options.\r\n   * @returns Public key digest, which should be sent to the token issuer.\r\n   */\n  SignedHttpRequest.prototype.generatePublicKeyThumbprint = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var kid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.popTokenGenerator.generateKid(this.shrParameters)];\n          case 1:\n            kid = _a.sent().kid;\n            return [2 /*return*/, kid];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a signed http request for the given payload with the given key.\r\n   * @param payload Payload to sign (e.g. access token)\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @param claims Additional claims to include/override in the signed JWT\r\n   * @returns Pop token signed with the corresponding private key\r\n   */\n  SignedHttpRequest.prototype.signRequest = function (payload, publicKeyThumbprint, claims) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims)];\n      });\n    });\n  };\n  /**\r\n   * Removes cached keys from browser for given public key thumbprint\r\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\r\n   * @returns If keys are properly deleted\r\n   */\n  SignedHttpRequest.prototype.removeKeys = function (publicKeyThumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return SignedHttpRequest;\n}();\nexport { SignedHttpRequest };\n//# sourceMappingURL=SignedHttpRequest.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}