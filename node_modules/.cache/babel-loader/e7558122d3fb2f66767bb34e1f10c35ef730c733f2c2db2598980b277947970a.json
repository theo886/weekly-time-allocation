{"ast":null,"code":"import{msalInstance}from'../auth/AuthProvider';import{protectedResources}from'../auth/authConfig';// Base URL for API requests\nconst API_BASE_URL=protectedResources.timeSheetApi.endpoint;// Token cache to avoid excessive requests\nlet tokenCache=null;// Get the authentication token\nconst getToken=async()=>{try{// Check if we have a valid cached token\nif(tokenCache&&tokenCache.expiresAt>Date.now()){console.log(\"Using cached token\");return tokenCache.token;}const account=msalInstance.getActiveAccount();if(!account){console.warn('No active account! Proceeding without authentication token.');return null;}try{const tokenResponse=await msalInstance.acquireTokenSilent({scopes:protectedResources.timeSheetApi.scopes,account:account});// Cache the token with expiration (subtract 5 minutes for safety)\nconst expiresInMs=tokenResponse.expiresOn?tokenResponse.expiresOn.getTime()-Date.now()-5*60*1000:3600*1000;// Default to 1 hour if no expiration\ntokenCache={token:tokenResponse.accessToken,expiresAt:Date.now()+expiresInMs};return tokenResponse.accessToken;}catch(tokenError){console.warn('Failed to get token, proceeding with unauthenticated request:',tokenError);return null;}}catch(error){console.error('Failed to get token:',error);return null;}};// Get authenticated headers\nconst getAuthHeaders=async()=>{const token=await getToken();const headers={'Content-Type':'application/json'};if(token){headers['Authorization']=`Bearer ${token}`;}return headers;};// Get timesheets for the current user\nexport async function getTimesheets(userInfo){try{const headers=await getAuthHeaders();const response=await fetch(`${API_BASE_URL}/timesheets?userId=${userInfo.userId}`,{headers});if(!response.ok){throw new Error(`Error fetching timesheets: ${response.statusText}`);}const data=await response.json();return data.timesheets||[];}catch(error){console.error('Failed to fetch timesheets:',error);throw error;}}// Save a timesheet with user information\nexport async function saveTimesheet(timesheet,userInfo){try{const headers=await getAuthHeaders();// Ensure user information is included in the timesheet\nconst timesheetWithUser={...timesheet,userId:userInfo.userId,userEmail:userInfo.email,userName:userInfo.name,updatedAt:new Date().toISOString()};const response=await fetch(`${API_BASE_URL}/timesheets`,{method:'POST',headers,body:JSON.stringify(timesheetWithUser)});if(!response.ok){throw new Error(`Error saving timesheet: ${response.statusText}`);}return await response.json();}catch(error){console.error('Failed to save timesheet:',error);throw error;}}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}