{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\nvar Base64Decode = /** @class */function () {\n  function Base64Decode() {}\n  /**\r\n   * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n   * @param input\r\n   */\n  Base64Decode.prototype.decode = function (input) {\n    var encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (encodedString.length % 4) {\n      case 0:\n        break;\n      case 2:\n        encodedString += \"==\";\n        break;\n      case 3:\n        encodedString += \"=\";\n        break;\n      default:\n        throw new Error(\"Invalid base64 string\");\n    }\n    var inputUtf8Arr = this.base64DecToArr(encodedString);\n    return BrowserStringUtils.utf8ArrToString(inputUtf8Arr);\n  };\n  /**\r\n   * Decodes base64 into Uint8Array\r\n   * @param base64String\r\n   * @param nBlockSize\r\n   */\n  Base64Decode.prototype.base64DecToArr = function (base64String, nBlockSize) {\n    var sB64Enc = base64String.replace(/[^A-Za-z0-9\\+\\/]/g, Constants.EMPTY_STRING);\n    var nInLen = sB64Enc.length;\n    var nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;\n    var aBytes = new Uint8Array(nOutLen);\n    for (var nMod3 = void 0, nMod4 = void 0, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n      nMod4 = nInIdx & 3;\n      nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n      if (nMod4 === 3 || nInLen - nInIdx === 1) {\n        for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n          aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n        }\n        nUint24 = 0;\n      }\n    }\n    return aBytes;\n  };\n  /**\r\n   * Base64 string to array decoding helper\r\n   * @param charNum\r\n   */\n  Base64Decode.prototype.b64ToUint6 = function (charNum) {\n    return charNum > 64 && charNum < 91 ? charNum - 65 : charNum > 96 && charNum < 123 ? charNum - 71 : charNum > 47 && charNum < 58 ? charNum + 4 : charNum === 43 ? 62 : charNum === 47 ? 63 : 0;\n  };\n  return Base64Decode;\n}();\nexport { Base64Decode };\n//# sourceMappingURL=Base64Decode.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}