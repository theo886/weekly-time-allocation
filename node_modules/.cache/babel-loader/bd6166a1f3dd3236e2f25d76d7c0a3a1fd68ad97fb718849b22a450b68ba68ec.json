{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\nvar CryptoOps = /** @class */function () {\n  function CryptoOps(logger, performanceClient, cryptoConfig) {\n    this.logger = logger;\n    // Browser crypto needs to be validated first before any other classes can be set.\n    this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new CryptoKeyStore(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n            return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n          case 1:\n            keyPair = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _b.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n            return [4 /*yield*/, this.hashString(publicJwkString)];\n          case 3:\n            publicJwkHash = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];\n          case 4:\n            privateKeyJwk = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n          case 5:\n            unextractablePrivateKey = _b.sent();\n            // Store Keypair data in keystore\n            return [4 /*yield*/, this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n          case 6:\n            // Store Keypair data in keystore\n            _b.sent();\n            if (publicKeyThumbMeasurement) {\n              publicKeyThumbMeasurement.endMeasurement({\n                success: true\n              });\n            }\n            return [2 /*return*/, publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cache.asymmetricKeys.removeItem(kid)];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.cache.asymmetricKeys.containsKey(kid)];\n          case 2:\n            keyFound = _a.sent();\n            return [2 /*return*/, !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cache.clear()];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n  CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n            return [4 /*yield*/, this.cache.asymmetricKeys.getItem(kid)];\n          case 1:\n            cachedKeyPair = _b.sent();\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n            return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _b.sent();\n            publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n            encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({\n              kid: kid\n            }));\n            shrHeader = JoseHeader.getShrHeaderString({\n              kid: encodedKeyIdThumbprint,\n              alg: publicKeyJwk.alg\n            });\n            encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\n            // Generate payload\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedShrHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n          case 3:\n            signatureBuffer = _b.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            signedJwt = tokenString + \".\" + encodedSignature;\n            if (signJwtMeasurement) {\n              signJwtMeasurement.endMeasurement({\n                success: true\n              });\n            }\n            return [2 /*return*/, signedJwt];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.browserCrypto.sha256Digest(plainText)];\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2 /*return*/, this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\nexport { CryptoOps };\n//# sourceMappingURL=CryptoOps.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}