{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Constant byte array length\nvar RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\nvar PkceGenerator = /** @class */function () {\n  function PkceGenerator(cryptoObj) {\n    this.base64Encode = new Base64Encode();\n    this.cryptoObj = cryptoObj;\n  }\n  /**\r\n   * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n   */\n  PkceGenerator.prototype.generateCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var codeVerifier, codeChallenge;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            codeVerifier = this.generateCodeVerifier();\n            return [4 /*yield*/, this.generateCodeChallengeFromVerifier(codeVerifier)];\n          case 1:\n            codeChallenge = _a.sent();\n            return [2 /*return*/, {\n              verifier: codeVerifier,\n              challenge: codeChallenge\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a random 32 byte buffer and returns the base64\r\n   * encoded string to be used as a PKCE Code Verifier\r\n   */\n  PkceGenerator.prototype.generateCodeVerifier = function () {\n    try {\n      // Generate random values as utf-8\n      var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n      this.cryptoObj.getRandomValues(buffer);\n      // encode verifier as base64\n      var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);\n      return pkceCodeVerifierB64;\n    } catch (e) {\n      throw BrowserAuthError.createPkceNotGeneratedError(e);\n    }\n  };\n  /**\r\n   * Creates a base64 encoded PKCE Code Challenge string from the\r\n   * hash created from the PKCE Code Verifier supplied\r\n   */\n  PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pkceHashedCodeVerifier, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.cryptoObj.sha256Digest(pkceCodeVerifier)];\n          case 1:\n            pkceHashedCodeVerifier = _a.sent();\n            // encode hash as base64\n            return [2 /*return*/, this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];\n          case 2:\n            e_1 = _a.sent();\n            throw BrowserAuthError.createPkceNotGeneratedError(e_1);\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return PkceGenerator;\n}();\nexport { PkceGenerator };\n//# sourceMappingURL=PkceGenerator.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}