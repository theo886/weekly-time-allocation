{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\nvar Base64Encode = /** @class */function () {\n  function Base64Encode() {}\n  /**\r\n   * Returns URL Safe b64 encoded string from a plaintext string.\r\n   * @param input\r\n   */\n  Base64Encode.prototype.urlEncode = function (input) {\n    return encodeURIComponent(this.encode(input).replace(/=/g, Constants.EMPTY_STRING).replace(/\\+/g, \"-\").replace(/\\//g, \"_\"));\n  };\n  /**\r\n   * Returns URL Safe b64 encoded string from an int8Array.\r\n   * @param inputArr\r\n   */\n  Base64Encode.prototype.urlEncodeArr = function (inputArr) {\n    return this.base64EncArr(inputArr).replace(/=/g, Constants.EMPTY_STRING).replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n  };\n  /**\r\n   * Returns b64 encoded string from plaintext string.\r\n   * @param input\r\n   */\n  Base64Encode.prototype.encode = function (input) {\n    var inputUtf8Arr = BrowserStringUtils.stringToUtf8Arr(input);\n    return this.base64EncArr(inputUtf8Arr);\n  };\n  /**\r\n   * Base64 encode byte array\r\n   * @param aBytes\r\n   */\n  Base64Encode.prototype.base64EncArr = function (aBytes) {\n    var eqLen = (3 - aBytes.length % 3) % 3;\n    var sB64Enc = Constants.EMPTY_STRING;\n    for (var nMod3 = void 0, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {\n      nMod3 = nIdx % 3;\n      /* Uncomment the following line in order to split the output in lines 76-character long: */\n      /*\r\n       *if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += \"\\r\\n\"; }\r\n       */\n      nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);\n      if (nMod3 === 2 || aBytes.length - nIdx === 1) {\n        sB64Enc += String.fromCharCode(this.uint6ToB64(nUint24 >>> 18 & 63), this.uint6ToB64(nUint24 >>> 12 & 63), this.uint6ToB64(nUint24 >>> 6 & 63), this.uint6ToB64(nUint24 & 63));\n        nUint24 = 0;\n      }\n    }\n    return eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? \"=\" : \"==\");\n  };\n  /**\r\n   * Base64 string to array encoding helper\r\n   * @param nUint6\r\n   */\n  Base64Encode.prototype.uint6ToB64 = function (nUint6) {\n    return nUint6 < 26 ? nUint6 + 65 : nUint6 < 52 ? nUint6 + 71 : nUint6 < 62 ? nUint6 - 4 : nUint6 === 62 ? 43 : nUint6 === 63 ? 47 : 65;\n  };\n  return Base64Encode;\n}();\nexport { Base64Encode };\n//# sourceMappingURL=Base64Encode.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}