{"ast":null,"code":"/*! @azure/msal-browser v2.39.0 2024-06-06 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.js';\nimport { MsrBrowserCrypto } from './MsrBrowserCrypto.js';\nimport { MsBrowserCrypto } from './MsBrowserCrypto.js';\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\n// RSA KeyGen Algorithm\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nvar S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nvar MODULUS_LENGTH = 2048;\n// Public Exponent\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\nvar BrowserCrypto = /** @class */function () {\n  function BrowserCrypto(logger, cryptoOptions) {\n    var _a, _b;\n    this.logger = logger;\n    this.cryptoOptions = cryptoOptions;\n    if (this.hasBrowserCrypto()) {\n      // Use standard modern web crypto if available\n      this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n      this.subtleCrypto = new ModernBrowserCrypto();\n    } else if (this.hasIECrypto()) {\n      // For IE11, use msCrypto interface\n      this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\n      this.subtleCrypto = new MsBrowserCrypto();\n    } else if (this.hasMsrCrypto() && ((_a = this.cryptoOptions) === null || _a === void 0 ? void 0 : _a.useMsrCrypto)) {\n      // For other browsers, use MSR Crypto if found\n      this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\n      this.subtleCrypto = new MsrBrowserCrypto();\n    } else {\n      if (this.hasMsrCrypto()) {\n        this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\n      }\n      this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\n      throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\n    }\n    // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\n    if (this.subtleCrypto.initPrng) {\n      this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\n      if (!((_b = this.cryptoOptions) === null || _b === void 0 ? void 0 : _b.entropy)) {\n        this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\n        throw BrowserConfigurationAuthError.createEntropyNotProvided();\n      }\n      this.logger.verbose(\"BrowserCrypto: Entropy provided\");\n      this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\n    }\n    this.keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\r\n   * Check whether IE crypto or other browser cryptography is available.\r\n   */\n  BrowserCrypto.prototype.hasIECrypto = function () {\n    return \"msCrypto\" in window;\n  };\n  /**\r\n   * Check whether browser crypto is available.\r\n   */\n  BrowserCrypto.prototype.hasBrowserCrypto = function () {\n    return \"crypto\" in window;\n  };\n  /**\r\n   * Check whether MSR crypto polyfill is available\r\n   */\n  BrowserCrypto.prototype.hasMsrCrypto = function () {\n    return \"msrCrypto\" in window;\n  };\n  /**\r\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n   * @param dataString\r\n   */\n  BrowserCrypto.prototype.sha256Digest = function (dataString) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        data = BrowserStringUtils.stringToUtf8Arr(dataString);\n        // MSR Crypto wants object with name property, instead of string\n        return [2 /*return*/, this.subtleCrypto.digest({\n          name: S256_HASH_ALG\n        }, data)];\n      });\n    });\n  };\n  /**\r\n   * Populates buffer with cryptographically random values.\r\n   * @param dataBuffer\r\n   */\n  BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return this.subtleCrypto.getRandomValues(dataBuffer);\n  };\n  /**\r\n   * Generates a keypair based on current keygen algorithm config.\r\n   * @param extractable\r\n   * @param usages\r\n   */\n  BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Export key as Json Web Key (JWK)\r\n   * @param key\r\n   * @param format\r\n   */\n  BrowserCrypto.prototype.exportJwk = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.exportKey(key)];\n      });\n    });\n  };\n  /**\r\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n   * @param key\r\n   * @param format\r\n   * @param extractable\r\n   * @param usages\r\n   */\n  BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Signs given data with given key\r\n   * @param key\r\n   * @param data\r\n   */\n  BrowserCrypto.prototype.sign = function (key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data)];\n      });\n    });\n  };\n  return BrowserCrypto;\n}();\nexport { BrowserCrypto };\n//# sourceMappingURL=BrowserCrypto.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}