{"ast":null,"code":"import React,{useEffect}from\"react\";import{MsalProvider,useMsal,useIsAuthenticated}from\"@azure/msal-react\";import{PublicClientApplication,EventType,InteractionStatus}from\"@azure/msal-browser\";import{msalConfig}from\"./authConfig\";// Initialize MSAL instance\nimport{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";export const msalInstance=new PublicClientApplication(msalConfig);// Handle the redirect response\nif(!window.location.hash.includes(\"error\")){msalInstance.handleRedirectPromise().catch(error=>{console.error(\"Redirect handling error:\",error);});}// Default redirect behavior after login\nmsalInstance.addEventCallback(event=>{if(event.eventType===EventType.LOGIN_SUCCESS&&event.payload){// The event payload for LOGIN_SUCCESS should contain the account\n// Safely type check the event payload\nconst payload=event.payload;if(payload.account){msalInstance.setActiveAccount(payload.account);console.log(\"Login successful, account set:\",payload.account);}}});export const MsalAuthProvider=_ref=>{let{children}=_ref;useEffect(()=>{// Check if we have active accounts on component mount\nconst accounts=msalInstance.getAllAccounts();if(accounts.length>0){msalInstance.setActiveAccount(accounts[0]);console.log(\"Set active account on mount:\",accounts[0]);}},[]);return/*#__PURE__*/_jsx(MsalProvider,{instance:msalInstance,children:/*#__PURE__*/_jsx(AuthenticationHandler,{children:children})});};// Component to handle authentication state\nconst AuthenticationHandler=_ref2=>{let{children}=_ref2;const{instance,inProgress}=useMsal();const isAuthenticated=useIsAuthenticated();useEffect(()=>{// If no active account is set but we have accounts in the cache,\n// set the first one as active\nif(!isAuthenticated&&inProgress===InteractionStatus.None){const accounts=instance.getAllAccounts();if(accounts.length>0){// Check if there's already an active account to avoid unnecessary updates\nconst activeAccount=instance.getActiveAccount();if(!activeAccount){instance.setActiveAccount(accounts[0]);console.log(\"Set active account from handler:\",accounts[0]);}}}},[instance,inProgress,isAuthenticated]);return/*#__PURE__*/_jsx(_Fragment,{children:children});};// Custom hook to get the currently authenticated user\nexport const useCurrentUser=()=>{const{accounts}=useMsal();const isAuthenticated=useIsAuthenticated();if(!isAuthenticated||accounts.length===0){return null;}return accounts[0];};// Get user information from the account\nexport const getUserInfo=account=>{if(!account)return null;return{username:account.username,name:account.name||account.username,email:account.username,userId:account.localAccountId,tenantId:account.tenantId};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}